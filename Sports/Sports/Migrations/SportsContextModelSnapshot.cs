// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sports.Models;

namespace Sports.Migrations
{
    [DbContext(typeof(Model.SportsContext))]
    partial class SportsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sports.Models.Athletes", b =>
                {
                    b.Property<int>("AthleteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AthleteName");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.HasKey("AthleteId");

                    b.HasIndex("RoleId");

                    b.ToTable("Athletes");

                    b.HasData(
                        new
                        {
                            AthleteId = 1,
                            AthleteName = "Mitchel Fausto",
                            Password = "Admin123#",
                            RoleId = 2
                        },
                        new
                        {
                            AthleteId = 2,
                            AthleteName = "Queen Jacobi",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 3,
                            AthleteName = "Magen Faye",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 4,
                            AthleteName = "Delicia Ledonne",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 5,
                            AthleteName = "Camille Grantham",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 6,
                            AthleteName = "Marc Voth",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 7,
                            AthleteName = "Randy Rondon",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 8,
                            AthleteName = "Delora Saville ",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 9,
                            AthleteName = "Rosario Reuben",
                            Password = "Admin123#",
                            RoleId = 1
                        },
                        new
                        {
                            AthleteId = 10,
                            AthleteName = "Lula Uhlman ",
                            Password = "Admin123#",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Sports.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Role = "Athlete"
                        },
                        new
                        {
                            RoleId = 2,
                            Role = "Coach"
                        });
                });

            modelBuilder.Entity("Sports.Models.TestSubscription", b =>
                {
                    b.Property<int>("TestSubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AthleteId");

                    b.Property<string>("Distance");

                    b.Property<int>("TestID");

                    b.HasKey("TestSubscriptionID");

                    b.HasIndex("AthleteId");

                    b.HasIndex("TestID");

                    b.ToTable("TestSubscriptions");
                });

            modelBuilder.Entity("Sports.Models.TestTypes", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestName");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            TestTypeId = 1,
                            TestName = "Cooper test"
                        },
                        new
                        {
                            TestTypeId = 2,
                            TestName = "sprint test"
                        });
                });

            modelBuilder.Entity("Sports.Models.Tests", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("TestTypeID");

                    b.HasKey("TestId");

                    b.HasIndex("TestTypeID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Sports.Models.Athletes", b =>
                {
                    b.HasOne("Sports.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sports.Models.TestSubscription", b =>
                {
                    b.HasOne("Sports.Models.Athletes", "Athletes")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sports.Models.Tests", "Tests")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sports.Models.Tests", b =>
                {
                    b.HasOne("Sports.Models.TestTypes", "TestTypes")
                        .WithMany()
                        .HasForeignKey("TestTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
